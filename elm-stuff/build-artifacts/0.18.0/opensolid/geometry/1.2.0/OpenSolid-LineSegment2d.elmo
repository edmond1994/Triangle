var _opensolid$geometry$OpenSolid_LineSegment2d$endpoints = function (_p0) {
	var _p1 = _p0;
	return _p1._0;
};
var _opensolid$geometry$OpenSolid_LineSegment2d$reverse = function (lineSegment) {
	var _p2 = _opensolid$geometry$OpenSolid_LineSegment2d$endpoints(lineSegment);
	var p1 = _p2._0;
	var p2 = _p2._1;
	return _opensolid$geometry$OpenSolid_Geometry_Types$LineSegment2d(
		{ctor: '_Tuple2', _0: p2, _1: p1});
};
var _opensolid$geometry$OpenSolid_LineSegment2d$interpolate = function (lineSegment) {
	var _p3 = _opensolid$geometry$OpenSolid_LineSegment2d$endpoints(lineSegment);
	var start = _p3._0;
	var end = _p3._1;
	return A2(_opensolid$geometry$OpenSolid_Point2d$interpolateFrom, start, end);
};
var _opensolid$geometry$OpenSolid_LineSegment2d$midpoint = function (lineSegment) {
	return A2(_opensolid$geometry$OpenSolid_LineSegment2d$interpolate, lineSegment, 0.5);
};
var _opensolid$geometry$OpenSolid_LineSegment2d$vector = function (lineSegment) {
	var _p4 = _opensolid$geometry$OpenSolid_LineSegment2d$endpoints(lineSegment);
	var p1 = _p4._0;
	var p2 = _p4._1;
	return A2(_opensolid$geometry$OpenSolid_Point2d$vectorFrom, p1, p2);
};
var _opensolid$geometry$OpenSolid_LineSegment2d$length = function (_p5) {
	return _opensolid$geometry$OpenSolid_Vector2d$length(
		_opensolid$geometry$OpenSolid_LineSegment2d$vector(_p5));
};
var _opensolid$geometry$OpenSolid_LineSegment2d$squaredLength = function (_p6) {
	return _opensolid$geometry$OpenSolid_Vector2d$squaredLength(
		_opensolid$geometry$OpenSolid_LineSegment2d$vector(_p6));
};
var _opensolid$geometry$OpenSolid_LineSegment2d$direction = function (_p7) {
	return _opensolid$geometry$OpenSolid_Vector2d$direction(
		_opensolid$geometry$OpenSolid_LineSegment2d$vector(_p7));
};
var _opensolid$geometry$OpenSolid_LineSegment2d$normalDirection = function (_p8) {
	return _opensolid$geometry$OpenSolid_Vector2d$direction(
		_opensolid$geometry$OpenSolid_Vector2d$perpendicularTo(
			_opensolid$geometry$OpenSolid_LineSegment2d$vector(_p8)));
};
var _opensolid$geometry$OpenSolid_LineSegment2d$intersectionPoint = F2(
	function (lineSegment1, lineSegment2) {
		var _p9 = _opensolid$geometry$OpenSolid_LineSegment2d$endpoints(lineSegment2);
		var q = _p9._0;
		var q_ = _p9._1;
		var _p10 = _opensolid$geometry$OpenSolid_LineSegment2d$endpoints(lineSegment1);
		var p = _p10._0;
		var p_ = _p10._1;
		var _p11 = {
			ctor: '_Tuple5',
			_0: _opensolid$geometry$OpenSolid_LineSegment2d$vector(lineSegment1),
			_1: _opensolid$geometry$OpenSolid_LineSegment2d$vector(lineSegment2),
			_2: A2(_opensolid$geometry$OpenSolid_Point2d$vectorFrom, p, q),
			_3: A2(_opensolid$geometry$OpenSolid_Point2d$vectorFrom, p, q_),
			_4: A2(_opensolid$geometry$OpenSolid_Point2d$vectorFrom, q, p_)
		};
		var r = _p11._0;
		var s = _p11._1;
		var pq = _p11._2;
		var pq_ = _p11._3;
		var qp_ = _p11._4;
		var _p12 = {
			ctor: '_Tuple4',
			_0: A2(_opensolid$geometry$OpenSolid_Vector2d$crossProduct, pq, r),
			_1: A2(_opensolid$geometry$OpenSolid_Vector2d$crossProduct, pq, s),
			_2: A2(_opensolid$geometry$OpenSolid_Vector2d$crossProduct, s, qp_),
			_3: A2(_opensolid$geometry$OpenSolid_Vector2d$crossProduct, r, pq_)
		};
		var pqXr = _p12._0;
		var pqXs = _p12._1;
		var sXqp_ = _p12._2;
		var rXpq_ = _p12._3;
		var _p13 = {ctor: '_Tuple2', _0: pqXs - sXqp_, _1: pqXr + rXpq_};
		var tDenominator = _p13._0;
		var uDenominator = _p13._1;
		if (_elm_lang$core$Native_Utils.eq(tDenominator, 0) || _elm_lang$core$Native_Utils.eq(uDenominator, 0)) {
			return (_elm_lang$core$Native_Utils.cmp(
				A2(_opensolid$geometry$OpenSolid_Vector2d$dotProduct, r, s),
				0) < 0) ? (_elm_lang$core$Native_Utils.eq(p_, q_) ? _elm_lang$core$Maybe$Just(p_) : (_elm_lang$core$Native_Utils.eq(p, q) ? _elm_lang$core$Maybe$Just(p) : _elm_lang$core$Maybe$Nothing)) : (_elm_lang$core$Native_Utils.eq(p_, q) ? _elm_lang$core$Maybe$Just(p_) : (_elm_lang$core$Native_Utils.eq(p, q_) ? _elm_lang$core$Maybe$Just(p) : _elm_lang$core$Maybe$Nothing));
		} else {
			var _p14 = {ctor: '_Tuple2', _0: pqXs / tDenominator, _1: pqXr / uDenominator};
			var t = _p14._0;
			var u = _p14._1;
			if (((_elm_lang$core$Native_Utils.cmp(0, t) < 1) && (_elm_lang$core$Native_Utils.cmp(t, 1) < 1)) && ((_elm_lang$core$Native_Utils.cmp(0, u) < 1) && (_elm_lang$core$Native_Utils.cmp(u, 1) < 1))) {
				var intersection = (_elm_lang$core$Native_Utils.cmp(
					A2(_elm_lang$core$Basics$min, t, 1 - t),
					A2(_elm_lang$core$Basics$min, u, 1 - u)) < 1) ? A2(_opensolid$geometry$OpenSolid_LineSegment2d$interpolate, lineSegment1, t) : A2(_opensolid$geometry$OpenSolid_LineSegment2d$interpolate, lineSegment2, u);
				return _elm_lang$core$Maybe$Just(intersection);
			} else {
				return _elm_lang$core$Maybe$Nothing;
			}
		}
	});
var _opensolid$geometry$OpenSolid_LineSegment2d$map = F2(
	function ($function, lineSegment) {
		var _p15 = _opensolid$geometry$OpenSolid_LineSegment2d$endpoints(lineSegment);
		var p1 = _p15._0;
		var p2 = _p15._1;
		return _opensolid$geometry$OpenSolid_Geometry_Types$LineSegment2d(
			{
				ctor: '_Tuple2',
				_0: $function(p1),
				_1: $function(p2)
			});
	});
var _opensolid$geometry$OpenSolid_LineSegment2d$scaleAbout = F2(
	function (point, scale) {
		return _opensolid$geometry$OpenSolid_LineSegment2d$map(
			A2(_opensolid$geometry$OpenSolid_Point2d$scaleAbout, point, scale));
	});
var _opensolid$geometry$OpenSolid_LineSegment2d$rotateAround = F2(
	function (centerPoint, angle) {
		return _opensolid$geometry$OpenSolid_LineSegment2d$map(
			A2(_opensolid$geometry$OpenSolid_Point2d$rotateAround, centerPoint, angle));
	});
var _opensolid$geometry$OpenSolid_LineSegment2d$translateBy = function (vector) {
	return _opensolid$geometry$OpenSolid_LineSegment2d$map(
		_opensolid$geometry$OpenSolid_Point2d$translateBy(vector));
};
var _opensolid$geometry$OpenSolid_LineSegment2d$mirrorAcross = function (axis) {
	return _opensolid$geometry$OpenSolid_LineSegment2d$map(
		_opensolid$geometry$OpenSolid_Point2d$mirrorAcross(axis));
};
var _opensolid$geometry$OpenSolid_LineSegment2d$projectOnto = function (axis) {
	return _opensolid$geometry$OpenSolid_LineSegment2d$map(
		_opensolid$geometry$OpenSolid_Point2d$projectOnto(axis));
};
var _opensolid$geometry$OpenSolid_LineSegment2d$relativeTo = function (frame) {
	return _opensolid$geometry$OpenSolid_LineSegment2d$map(
		_opensolid$geometry$OpenSolid_Point2d$relativeTo(frame));
};
var _opensolid$geometry$OpenSolid_LineSegment2d$placeIn = function (frame) {
	return _opensolid$geometry$OpenSolid_LineSegment2d$map(
		_opensolid$geometry$OpenSolid_Point2d$placeIn(frame));
};
var _opensolid$geometry$OpenSolid_LineSegment2d$placeOnto = function (sketchPlane) {
	var place = _opensolid$geometry$OpenSolid_Point2d$placeOnto(sketchPlane);
	return function (lineSegment) {
		var _p16 = _opensolid$geometry$OpenSolid_LineSegment2d$endpoints(lineSegment);
		var p1 = _p16._0;
		var p2 = _p16._1;
		return _opensolid$geometry$OpenSolid_Geometry_Types$LineSegment3d(
			{
				ctor: '_Tuple2',
				_0: place(p1),
				_1: place(p2)
			});
	};
};
var _opensolid$geometry$OpenSolid_LineSegment2d$boundingBox = function (lineSegment) {
	var _p17 = _opensolid$geometry$OpenSolid_LineSegment2d$endpoints(lineSegment);
	var p1 = _p17._0;
	var p2 = _p17._1;
	return A2(_opensolid$geometry$OpenSolid_Point2d$hull, p1, p2);
};
var _opensolid$geometry$OpenSolid_LineSegment2d$endPoint = function (_p18) {
	var _p19 = _p18;
	return _p19._0._1;
};
var _opensolid$geometry$OpenSolid_LineSegment2d$startPoint = function (_p20) {
	var _p21 = _p20;
	return _p21._0._0;
};
var _opensolid$geometry$OpenSolid_LineSegment2d$along = F3(
	function (axis, start, end) {
		return _opensolid$geometry$OpenSolid_Geometry_Types$LineSegment2d(
			{
				ctor: '_Tuple2',
				_0: A2(_opensolid$geometry$OpenSolid_Point2d$along, axis, start),
				_1: A2(_opensolid$geometry$OpenSolid_Point2d$along, axis, end)
			});
	});
