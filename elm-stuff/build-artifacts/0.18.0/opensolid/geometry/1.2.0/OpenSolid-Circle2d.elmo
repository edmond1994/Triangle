var _opensolid$geometry$OpenSolid_Circle2d$radius = function (_p0) {
	var _p1 = _p0;
	return _p1._0.radius;
};
var _opensolid$geometry$OpenSolid_Circle2d$diameter = function (circle) {
	return 2 * _opensolid$geometry$OpenSolid_Circle2d$radius(circle);
};
var _opensolid$geometry$OpenSolid_Circle2d$area = function (circle) {
	var r = _opensolid$geometry$OpenSolid_Circle2d$radius(circle);
	return (_elm_lang$core$Basics$pi * r) * r;
};
var _opensolid$geometry$OpenSolid_Circle2d$circumference = function (circle) {
	return (2 * _elm_lang$core$Basics$pi) * _opensolid$geometry$OpenSolid_Circle2d$radius(circle);
};
var _opensolid$geometry$OpenSolid_Circle2d$centerPoint = function (_p2) {
	var _p3 = _p2;
	return _p3._0.centerPoint;
};
var _opensolid$geometry$OpenSolid_Circle2d$contains = F2(
	function (point, circle) {
		var r = _opensolid$geometry$OpenSolid_Circle2d$radius(circle);
		return _elm_lang$core$Native_Utils.cmp(
			A2(
				_opensolid$geometry$OpenSolid_Point2d$squaredDistanceFrom,
				_opensolid$geometry$OpenSolid_Circle2d$centerPoint(circle),
				point),
			r * r) < 1;
	});
var _opensolid$geometry$OpenSolid_Circle2d$scaleAbout = F2(
	function (point, scale) {
		var scalePoint = A2(_opensolid$geometry$OpenSolid_Point2d$scaleAbout, point, scale);
		return function (circle) {
			return _opensolid$geometry$OpenSolid_Geometry_Types$Circle2d(
				{
					centerPoint: scalePoint(
						_opensolid$geometry$OpenSolid_Circle2d$centerPoint(circle)),
					radius: scale * _opensolid$geometry$OpenSolid_Circle2d$radius(circle)
				});
		};
	});
var _opensolid$geometry$OpenSolid_Circle2d$rotateAround = F2(
	function (point, angle) {
		var rotatePoint = A2(_opensolid$geometry$OpenSolid_Point2d$rotateAround, point, angle);
		return function (circle) {
			return _opensolid$geometry$OpenSolid_Geometry_Types$Circle2d(
				{
					centerPoint: rotatePoint(
						_opensolid$geometry$OpenSolid_Circle2d$centerPoint(circle)),
					radius: _opensolid$geometry$OpenSolid_Circle2d$radius(circle)
				});
		};
	});
var _opensolid$geometry$OpenSolid_Circle2d$translateBy = function (displacement) {
	var translatePoint = _opensolid$geometry$OpenSolid_Point2d$translateBy(displacement);
	return function (circle) {
		return _opensolid$geometry$OpenSolid_Geometry_Types$Circle2d(
			{
				centerPoint: translatePoint(
					_opensolid$geometry$OpenSolid_Circle2d$centerPoint(circle)),
				radius: _opensolid$geometry$OpenSolid_Circle2d$radius(circle)
			});
	};
};
var _opensolid$geometry$OpenSolid_Circle2d$mirrorAcross = function (axis) {
	var mirrorPoint = _opensolid$geometry$OpenSolid_Point2d$mirrorAcross(axis);
	return function (circle) {
		return _opensolid$geometry$OpenSolid_Geometry_Types$Circle2d(
			{
				centerPoint: mirrorPoint(
					_opensolid$geometry$OpenSolid_Circle2d$centerPoint(circle)),
				radius: _opensolid$geometry$OpenSolid_Circle2d$radius(circle)
			});
	};
};
var _opensolid$geometry$OpenSolid_Circle2d$relativeTo = function (frame) {
	var relativePoint = _opensolid$geometry$OpenSolid_Point2d$relativeTo(frame);
	return function (circle) {
		return _opensolid$geometry$OpenSolid_Geometry_Types$Circle2d(
			{
				centerPoint: relativePoint(
					_opensolid$geometry$OpenSolid_Circle2d$centerPoint(circle)),
				radius: _opensolid$geometry$OpenSolid_Circle2d$radius(circle)
			});
	};
};
var _opensolid$geometry$OpenSolid_Circle2d$placeIn = function (frame) {
	var placePoint = _opensolid$geometry$OpenSolid_Point2d$placeIn(frame);
	return function (circle) {
		return _opensolid$geometry$OpenSolid_Geometry_Types$Circle2d(
			{
				centerPoint: placePoint(
					_opensolid$geometry$OpenSolid_Circle2d$centerPoint(circle)),
				radius: _opensolid$geometry$OpenSolid_Circle2d$radius(circle)
			});
	};
};
var _opensolid$geometry$OpenSolid_Circle2d$placeOnto = F2(
	function (sketchPlane, circle) {
		return _opensolid$geometry$OpenSolid_Geometry_Types$Circle3d(
			{
				centerPoint: A2(
					_opensolid$geometry$OpenSolid_Point2d$placeOnto,
					sketchPlane,
					_opensolid$geometry$OpenSolid_Circle2d$centerPoint(circle)),
				axialDirection: _opensolid$geometry$OpenSolid_SketchPlane3d$normalDirection(sketchPlane),
				radius: _opensolid$geometry$OpenSolid_Circle2d$radius(circle)
			});
	});
var _opensolid$geometry$OpenSolid_Circle2d$boundingBox = function (circle) {
	var r = _opensolid$geometry$OpenSolid_Circle2d$radius(circle);
	var _p4 = _opensolid$geometry$OpenSolid_Point2d$coordinates(
		_opensolid$geometry$OpenSolid_Circle2d$centerPoint(circle));
	var x = _p4._0;
	var y = _p4._1;
	return _opensolid$geometry$OpenSolid_Geometry_Types$BoundingBox2d(
		{minX: x - r, maxX: x + r, minY: y - r, maxY: y + r});
};
var _opensolid$geometry$OpenSolid_Circle2d$throughPoints = F3(
	function (firstPoint, secondPoint, thirdPoint) {
		var c2 = A2(_opensolid$geometry$OpenSolid_Point2d$squaredDistanceFrom, thirdPoint, firstPoint);
		var b2 = A2(_opensolid$geometry$OpenSolid_Point2d$squaredDistanceFrom, secondPoint, thirdPoint);
		var a2 = A2(_opensolid$geometry$OpenSolid_Point2d$squaredDistanceFrom, firstPoint, secondPoint);
		var t1 = a2 * ((b2 + c2) - a2);
		var t2 = b2 * ((c2 + a2) - b2);
		var t3 = c2 * ((a2 + b2) - c2);
		var sum = (t1 + t2) + t3;
		if (_elm_lang$core$Native_Utils.eq(sum, 0)) {
			return _elm_lang$core$Maybe$Nothing;
		} else {
			var _p5 = _opensolid$geometry$OpenSolid_Point2d$coordinates(thirdPoint);
			var x3 = _p5._0;
			var y3 = _p5._1;
			var _p6 = _opensolid$geometry$OpenSolid_Point2d$coordinates(secondPoint);
			var x2 = _p6._0;
			var y2 = _p6._1;
			var _p7 = _opensolid$geometry$OpenSolid_Point2d$coordinates(firstPoint);
			var x1 = _p7._0;
			var y1 = _p7._1;
			var w3 = t3 / sum;
			var w2 = t2 / sum;
			var w1 = t1 / sum;
			var centerPoint = _opensolid$geometry$OpenSolid_Geometry_Types$Point2d(
				{ctor: '_Tuple2', _0: ((w1 * x3) + (w2 * x1)) + (w3 * x2), _1: ((w1 * y3) + (w2 * y1)) + (w3 * y2)});
			var r1 = A2(_opensolid$geometry$OpenSolid_Point2d$distanceFrom, centerPoint, firstPoint);
			var r2 = A2(_opensolid$geometry$OpenSolid_Point2d$distanceFrom, centerPoint, secondPoint);
			var r3 = A2(_opensolid$geometry$OpenSolid_Point2d$distanceFrom, centerPoint, thirdPoint);
			return _elm_lang$core$Maybe$Just(
				_opensolid$geometry$OpenSolid_Geometry_Types$Circle2d(
					{centerPoint: centerPoint, radius: ((r1 + r2) + r3) / 3}));
		}
	});
var _opensolid$geometry$OpenSolid_Circle2d$unit = _opensolid$geometry$OpenSolid_Geometry_Types$Circle2d(
	{centerPoint: _opensolid$geometry$OpenSolid_Point2d$origin, radius: 1});
