var _opensolid$geometry$OpenSolid_Axis3d$direction = function (_p0) {
	var _p1 = _p0;
	return _p1._0.direction;
};
var _opensolid$geometry$OpenSolid_Axis3d$moveTo = F2(
	function (newOrigin, axis) {
		return _opensolid$geometry$OpenSolid_Geometry_Types$Axis3d(
			{
				originPoint: newOrigin,
				direction: _opensolid$geometry$OpenSolid_Axis3d$direction(axis)
			});
	});
var _opensolid$geometry$OpenSolid_Axis3d$originPoint = function (_p2) {
	var _p3 = _p2;
	return _p3._0.originPoint;
};
var _opensolid$geometry$OpenSolid_Axis3d$flip = function (axis) {
	return _opensolid$geometry$OpenSolid_Geometry_Types$Axis3d(
		{
			originPoint: _opensolid$geometry$OpenSolid_Axis3d$originPoint(axis),
			direction: _opensolid$geometry$OpenSolid_Direction3d$flip(
				_opensolid$geometry$OpenSolid_Axis3d$direction(axis))
		});
};
var _opensolid$geometry$OpenSolid_Axis3d$rotateAround = F2(
	function (otherAxis, angle) {
		var rotateDirection = A2(_opensolid$geometry$OpenSolid_Direction3d$rotateAround, otherAxis, angle);
		var rotatePoint = A2(_opensolid$geometry$OpenSolid_Point3d$rotateAround, otherAxis, angle);
		return function (axis) {
			return _opensolid$geometry$OpenSolid_Geometry_Types$Axis3d(
				{
					originPoint: rotatePoint(
						_opensolid$geometry$OpenSolid_Axis3d$originPoint(axis)),
					direction: rotateDirection(
						_opensolid$geometry$OpenSolid_Axis3d$direction(axis))
				});
		};
	});
var _opensolid$geometry$OpenSolid_Axis3d$translateBy = F2(
	function (vector, axis) {
		return _opensolid$geometry$OpenSolid_Geometry_Types$Axis3d(
			{
				originPoint: A2(
					_opensolid$geometry$OpenSolid_Point3d$translateBy,
					vector,
					_opensolid$geometry$OpenSolid_Axis3d$originPoint(axis)),
				direction: _opensolid$geometry$OpenSolid_Axis3d$direction(axis)
			});
	});
var _opensolid$geometry$OpenSolid_Axis3d$mirrorAcross = function (plane) {
	var mirrorDirection = _opensolid$geometry$OpenSolid_Direction3d$mirrorAcross(plane);
	var mirrorPoint = _opensolid$geometry$OpenSolid_Point3d$mirrorAcross(plane);
	return function (axis) {
		return _opensolid$geometry$OpenSolid_Geometry_Types$Axis3d(
			{
				originPoint: mirrorPoint(
					_opensolid$geometry$OpenSolid_Axis3d$originPoint(axis)),
				direction: mirrorDirection(
					_opensolid$geometry$OpenSolid_Axis3d$direction(axis))
			});
	};
};
var _opensolid$geometry$OpenSolid_Axis3d$projectOnto = F2(
	function (plane, axis) {
		var projectedOrigin = A2(
			_opensolid$geometry$OpenSolid_Point3d$projectOnto,
			plane,
			_opensolid$geometry$OpenSolid_Axis3d$originPoint(axis));
		var toAxis = function (direction) {
			return _opensolid$geometry$OpenSolid_Geometry_Types$Axis3d(
				{originPoint: projectedOrigin, direction: direction});
		};
		return A2(
			_elm_lang$core$Maybe$map,
			toAxis,
			A2(
				_opensolid$geometry$OpenSolid_Direction3d$projectOnto,
				plane,
				_opensolid$geometry$OpenSolid_Axis3d$direction(axis)));
	});
var _opensolid$geometry$OpenSolid_Axis3d$relativeTo = function (frame) {
	var relativeDirection = _opensolid$geometry$OpenSolid_Direction3d$relativeTo(frame);
	var relativePoint = _opensolid$geometry$OpenSolid_Point3d$relativeTo(frame);
	return function (axis) {
		return _opensolid$geometry$OpenSolid_Geometry_Types$Axis3d(
			{
				originPoint: relativePoint(
					_opensolid$geometry$OpenSolid_Axis3d$originPoint(axis)),
				direction: relativeDirection(
					_opensolid$geometry$OpenSolid_Axis3d$direction(axis))
			});
	};
};
var _opensolid$geometry$OpenSolid_Axis3d$placeIn = function (frame) {
	var placeDirection = _opensolid$geometry$OpenSolid_Direction3d$placeIn(frame);
	var placePoint = _opensolid$geometry$OpenSolid_Point3d$placeIn(frame);
	return function (axis) {
		return _opensolid$geometry$OpenSolid_Geometry_Types$Axis3d(
			{
				originPoint: placePoint(
					_opensolid$geometry$OpenSolid_Axis3d$originPoint(axis)),
				direction: placeDirection(
					_opensolid$geometry$OpenSolid_Axis3d$direction(axis))
			});
	};
};
var _opensolid$geometry$OpenSolid_Axis3d$projectInto = F2(
	function (sketchPlane, axis) {
		var projectedOrigin = A2(
			_opensolid$geometry$OpenSolid_Point3d$projectInto,
			sketchPlane,
			_opensolid$geometry$OpenSolid_Axis3d$originPoint(axis));
		var toAxis = function (direction) {
			return _opensolid$geometry$OpenSolid_Geometry_Types$Axis2d(
				{originPoint: projectedOrigin, direction: direction});
		};
		return A2(
			_elm_lang$core$Maybe$map,
			toAxis,
			A2(
				_opensolid$geometry$OpenSolid_Direction3d$projectInto,
				sketchPlane,
				_opensolid$geometry$OpenSolid_Axis3d$direction(axis)));
	});
var _opensolid$geometry$OpenSolid_Axis3d$z = _opensolid$geometry$OpenSolid_Geometry_Types$Axis3d(
	{originPoint: _opensolid$geometry$OpenSolid_Point3d$origin, direction: _opensolid$geometry$OpenSolid_Direction3d$z});
var _opensolid$geometry$OpenSolid_Axis3d$y = _opensolid$geometry$OpenSolid_Geometry_Types$Axis3d(
	{originPoint: _opensolid$geometry$OpenSolid_Point3d$origin, direction: _opensolid$geometry$OpenSolid_Direction3d$y});
var _opensolid$geometry$OpenSolid_Axis3d$x = _opensolid$geometry$OpenSolid_Geometry_Types$Axis3d(
	{originPoint: _opensolid$geometry$OpenSolid_Point3d$origin, direction: _opensolid$geometry$OpenSolid_Direction3d$x});
