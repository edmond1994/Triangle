var _opensolid$geometry$OpenSolid_CubicSpline3d$endPoint = function (_p0) {
	var _p1 = _p0;
	return _p1._0._3;
};
var _opensolid$geometry$OpenSolid_CubicSpline3d$startPoint = function (_p2) {
	var _p3 = _p2;
	return _p3._0._0;
};
var _opensolid$geometry$OpenSolid_CubicSpline3d$controlPoints = function (_p4) {
	var _p5 = _p4;
	return _p5._0;
};
var _opensolid$geometry$OpenSolid_CubicSpline3d$startDerivative = function (spline) {
	var _p6 = _opensolid$geometry$OpenSolid_CubicSpline3d$controlPoints(spline);
	var p1 = _p6._0;
	var p2 = _p6._1;
	return A2(
		_opensolid$geometry$OpenSolid_Vector3d$scaleBy,
		3,
		A2(_opensolid$geometry$OpenSolid_Point3d$vectorFrom, p1, p2));
};
var _opensolid$geometry$OpenSolid_CubicSpline3d$endDerivative = function (spline) {
	var _p7 = _opensolid$geometry$OpenSolid_CubicSpline3d$controlPoints(spline);
	var p3 = _p7._2;
	var p4 = _p7._3;
	return A2(
		_opensolid$geometry$OpenSolid_Vector3d$scaleBy,
		3,
		A2(_opensolid$geometry$OpenSolid_Point3d$vectorFrom, p3, p4));
};
var _opensolid$geometry$OpenSolid_CubicSpline3d$point = F2(
	function (spline, t) {
		var _p8 = _opensolid$geometry$OpenSolid_CubicSpline3d$controlPoints(spline);
		var p1 = _p8._0;
		var p2 = _p8._1;
		var p3 = _p8._2;
		var p4 = _p8._3;
		var q1 = A3(_opensolid$geometry$OpenSolid_Point3d$interpolateFrom, p1, p2, t);
		var q2 = A3(_opensolid$geometry$OpenSolid_Point3d$interpolateFrom, p2, p3, t);
		var r1 = A3(_opensolid$geometry$OpenSolid_Point3d$interpolateFrom, q1, q2, t);
		var q3 = A3(_opensolid$geometry$OpenSolid_Point3d$interpolateFrom, p3, p4, t);
		var r2 = A3(_opensolid$geometry$OpenSolid_Point3d$interpolateFrom, q2, q3, t);
		return A3(_opensolid$geometry$OpenSolid_Point3d$interpolateFrom, r1, r2, t);
	});
var _opensolid$geometry$OpenSolid_CubicSpline3d$derivative = function (spline) {
	var _p9 = _opensolid$geometry$OpenSolid_CubicSpline3d$controlPoints(spline);
	var p1 = _p9._0;
	var p2 = _p9._1;
	var p3 = _p9._2;
	var p4 = _p9._3;
	var v1 = A2(_opensolid$geometry$OpenSolid_Point3d$vectorFrom, p1, p2);
	var v2 = A2(_opensolid$geometry$OpenSolid_Point3d$vectorFrom, p2, p3);
	var v3 = A2(_opensolid$geometry$OpenSolid_Point3d$vectorFrom, p3, p4);
	return function (t) {
		var w2 = A3(_opensolid$geometry$OpenSolid_Vector3d$interpolateFrom, v2, v3, t);
		var w1 = A3(_opensolid$geometry$OpenSolid_Vector3d$interpolateFrom, v1, v2, t);
		return A2(
			_opensolid$geometry$OpenSolid_Vector3d$scaleBy,
			3,
			A3(_opensolid$geometry$OpenSolid_Vector3d$interpolateFrom, w1, w2, t));
	};
};
var _opensolid$geometry$OpenSolid_CubicSpline3d$mapControlPoints = F2(
	function ($function, spline) {
		var _p10 = _opensolid$geometry$OpenSolid_CubicSpline3d$controlPoints(spline);
		var p1 = _p10._0;
		var p2 = _p10._1;
		var p3 = _p10._2;
		var p4 = _p10._3;
		return _opensolid$geometry$OpenSolid_Geometry_Types$CubicSpline3d(
			{
				ctor: '_Tuple4',
				_0: $function(p1),
				_1: $function(p2),
				_2: $function(p3),
				_3: $function(p4)
			});
	});
var _opensolid$geometry$OpenSolid_CubicSpline3d$scaleAbout = F2(
	function (point, scale) {
		return _opensolid$geometry$OpenSolid_CubicSpline3d$mapControlPoints(
			A2(_opensolid$geometry$OpenSolid_Point3d$scaleAbout, point, scale));
	});
var _opensolid$geometry$OpenSolid_CubicSpline3d$rotateAround = F2(
	function (axis, angle) {
		return _opensolid$geometry$OpenSolid_CubicSpline3d$mapControlPoints(
			A2(_opensolid$geometry$OpenSolid_Point3d$rotateAround, axis, angle));
	});
var _opensolid$geometry$OpenSolid_CubicSpline3d$translateBy = function (displacement) {
	return _opensolid$geometry$OpenSolid_CubicSpline3d$mapControlPoints(
		_opensolid$geometry$OpenSolid_Point3d$translateBy(displacement));
};
var _opensolid$geometry$OpenSolid_CubicSpline3d$mirrorAcross = function (plane) {
	return _opensolid$geometry$OpenSolid_CubicSpline3d$mapControlPoints(
		_opensolid$geometry$OpenSolid_Point3d$mirrorAcross(plane));
};
var _opensolid$geometry$OpenSolid_CubicSpline3d$projectOnto = function (plane) {
	return _opensolid$geometry$OpenSolid_CubicSpline3d$mapControlPoints(
		_opensolid$geometry$OpenSolid_Point3d$projectOnto(plane));
};
var _opensolid$geometry$OpenSolid_CubicSpline3d$relativeTo = function (frame) {
	return _opensolid$geometry$OpenSolid_CubicSpline3d$mapControlPoints(
		_opensolid$geometry$OpenSolid_Point3d$relativeTo(frame));
};
var _opensolid$geometry$OpenSolid_CubicSpline3d$placeIn = function (frame) {
	return _opensolid$geometry$OpenSolid_CubicSpline3d$mapControlPoints(
		_opensolid$geometry$OpenSolid_Point3d$placeIn(frame));
};
var _opensolid$geometry$OpenSolid_CubicSpline3d$projectInto = F2(
	function (sketchPlane, spline) {
		var project = _opensolid$geometry$OpenSolid_Point3d$projectInto(sketchPlane);
		var _p11 = _opensolid$geometry$OpenSolid_CubicSpline3d$controlPoints(spline);
		var p1 = _p11._0;
		var p2 = _p11._1;
		var p3 = _p11._2;
		var p4 = _p11._3;
		return _opensolid$geometry$OpenSolid_Geometry_Types$CubicSpline2d(
			{
				ctor: '_Tuple4',
				_0: project(p1),
				_1: project(p2),
				_2: project(p3),
				_3: project(p4)
			});
	});
var _opensolid$geometry$OpenSolid_CubicSpline3d$bezier = F4(
	function (firstPoint, secondPoint, thirdPoint, fourthPoint) {
		return _opensolid$geometry$OpenSolid_Geometry_Types$CubicSpline3d(
			{ctor: '_Tuple4', _0: firstPoint, _1: secondPoint, _2: thirdPoint, _3: fourthPoint});
	});
var _opensolid$geometry$OpenSolid_CubicSpline3d$hermite = F2(
	function (start, end) {
		var _p12 = end;
		var endPoint = _p12._0;
		var endDerivative = _p12._1;
		var endControlPoint = A2(
			_opensolid$geometry$OpenSolid_Point3d$translateBy,
			A2(_opensolid$geometry$OpenSolid_Vector3d$scaleBy, -1 / 3, endDerivative),
			endPoint);
		var _p13 = start;
		var startPoint = _p13._0;
		var startDerivative = _p13._1;
		var startControlPoint = A2(
			_opensolid$geometry$OpenSolid_Point3d$translateBy,
			A2(_opensolid$geometry$OpenSolid_Vector3d$scaleBy, 1 / 3, startDerivative),
			startPoint);
		return A4(_opensolid$geometry$OpenSolid_CubicSpline3d$bezier, startPoint, startControlPoint, endControlPoint, endPoint);
	});
