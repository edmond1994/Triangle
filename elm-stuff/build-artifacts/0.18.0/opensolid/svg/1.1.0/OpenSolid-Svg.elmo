var _opensolid$svg$OpenSolid_Svg$placeIn = F2(
	function (frame, element) {
		var _p0 = _opensolid$geometry$OpenSolid_Direction2d$components(
			_opensolid$geometry$OpenSolid_Frame2d$yDirection(frame));
		var x2 = _p0._0;
		var y2 = _p0._1;
		var _p1 = _opensolid$geometry$OpenSolid_Direction2d$components(
			_opensolid$geometry$OpenSolid_Frame2d$xDirection(frame));
		var x1 = _p1._0;
		var y1 = _p1._1;
		var _p2 = _opensolid$geometry$OpenSolid_Point2d$coordinates(
			_opensolid$geometry$OpenSolid_Frame2d$originPoint(frame));
		var px = _p2._0;
		var py = _p2._1;
		var components = A2(
			_elm_lang$core$List$map,
			_elm_lang$core$Basics$toString,
			{
				ctor: '::',
				_0: x1,
				_1: {
					ctor: '::',
					_0: y1,
					_1: {
						ctor: '::',
						_0: x2,
						_1: {
							ctor: '::',
							_0: y2,
							_1: {
								ctor: '::',
								_0: px,
								_1: {
									ctor: '::',
									_0: py,
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			});
		var transform = A2(
			_elm_lang$core$Basics_ops['++'],
			'matrix(',
			A2(
				_elm_lang$core$Basics_ops['++'],
				A2(_elm_lang$core$String$join, ' ', components),
				')'));
		return A2(
			_elm_lang$svg$Svg$g,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$transform(transform),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: element,
				_1: {ctor: '[]'}
			});
	});
var _opensolid$svg$OpenSolid_Svg$relativeTo = function (frame) {
	return _opensolid$svg$OpenSolid_Svg$placeIn(
		A2(_opensolid$geometry$OpenSolid_Frame2d$relativeTo, frame, _opensolid$geometry$OpenSolid_Frame2d$xy));
};
var _opensolid$svg$OpenSolid_Svg$mirrorAcross = function (axis) {
	return _opensolid$svg$OpenSolid_Svg$placeIn(
		A2(_opensolid$geometry$OpenSolid_Frame2d$mirrorAcross, axis, _opensolid$geometry$OpenSolid_Frame2d$xy));
};
var _opensolid$svg$OpenSolid_Svg$translateBy = function (vector) {
	return _opensolid$svg$OpenSolid_Svg$placeIn(
		A2(_opensolid$geometry$OpenSolid_Frame2d$translateBy, vector, _opensolid$geometry$OpenSolid_Frame2d$xy));
};
var _opensolid$svg$OpenSolid_Svg$rotateAround = F2(
	function (point, angle) {
		return _opensolid$svg$OpenSolid_Svg$placeIn(
			A3(_opensolid$geometry$OpenSolid_Frame2d$rotateAround, point, angle, _opensolid$geometry$OpenSolid_Frame2d$xy));
	});
var _opensolid$svg$OpenSolid_Svg$scaleAbout = F3(
	function (point, scale, element) {
		var _p3 = _opensolid$geometry$OpenSolid_Point2d$coordinates(
			A3(_opensolid$geometry$OpenSolid_Point2d$scaleAbout, point, scale, _opensolid$geometry$OpenSolid_Point2d$origin));
		var px = _p3._0;
		var py = _p3._1;
		var components = A2(
			_elm_lang$core$List$map,
			_elm_lang$core$Basics$toString,
			{
				ctor: '::',
				_0: scale,
				_1: {
					ctor: '::',
					_0: 0,
					_1: {
						ctor: '::',
						_0: 0,
						_1: {
							ctor: '::',
							_0: scale,
							_1: {
								ctor: '::',
								_0: px,
								_1: {
									ctor: '::',
									_0: py,
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			});
		var transform = A2(
			_elm_lang$core$Basics_ops['++'],
			'matrix(',
			A2(
				_elm_lang$core$Basics_ops['++'],
				A2(_elm_lang$core$String$join, ' ', components),
				')'));
		return A2(
			_elm_lang$svg$Svg$g,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$transform(transform),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: element,
				_1: {ctor: '[]'}
			});
	});
var _opensolid$svg$OpenSolid_Svg$text2d = F3(
	function (attributes, basePoint, text) {
		var mirrorAxis = _opensolid$geometry$OpenSolid_Geometry_Types$Axis2d(
			{originPoint: basePoint, direction: _opensolid$geometry$OpenSolid_Direction2d$x});
		var _p4 = _opensolid$geometry$OpenSolid_Point2d$coordinates(basePoint);
		var x = _p4._0;
		var y = _p4._1;
		var xAttribute = _elm_lang$svg$Svg_Attributes$x(
			_elm_lang$core$Basics$toString(x));
		var yAttribute = _elm_lang$svg$Svg_Attributes$y(
			_elm_lang$core$Basics$toString(y));
		return A2(
			_opensolid$svg$OpenSolid_Svg$mirrorAcross,
			mirrorAxis,
			A2(
				_elm_lang$svg$Svg$text_,
				{
					ctor: '::',
					_0: xAttribute,
					_1: {ctor: '::', _0: yAttribute, _1: attributes}
				},
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg$text(text),
					_1: {ctor: '[]'}
				}));
	});
var _opensolid$svg$OpenSolid_Svg$cubicSpline2d = F2(
	function (attributes, spline) {
		var _p5 = _opensolid$geometry$OpenSolid_CubicSpline2d$controlPoints(spline);
		var p1 = _p5._0;
		var p2 = _p5._1;
		var p3 = _p5._2;
		var p4 = _p5._3;
		var _p6 = _opensolid$geometry$OpenSolid_Point2d$coordinates(p1);
		var x1 = _p6._0;
		var y1 = _p6._1;
		var _p7 = _opensolid$geometry$OpenSolid_Point2d$coordinates(p2);
		var x2 = _p7._0;
		var y2 = _p7._1;
		var _p8 = _opensolid$geometry$OpenSolid_Point2d$coordinates(p3);
		var x3 = _p8._0;
		var y3 = _p8._1;
		var _p9 = _opensolid$geometry$OpenSolid_Point2d$coordinates(p4);
		var x4 = _p9._0;
		var y4 = _p9._1;
		var pathComponents = {
			ctor: '::',
			_0: 'M',
			_1: {
				ctor: '::',
				_0: _elm_lang$core$Basics$toString(x1),
				_1: {
					ctor: '::',
					_0: _elm_lang$core$Basics$toString(y1),
					_1: {
						ctor: '::',
						_0: 'C',
						_1: {
							ctor: '::',
							_0: _elm_lang$core$Basics$toString(x2),
							_1: {
								ctor: '::',
								_0: _elm_lang$core$Basics$toString(y2),
								_1: {
									ctor: '::',
									_0: _elm_lang$core$Basics$toString(x3),
									_1: {
										ctor: '::',
										_0: _elm_lang$core$Basics$toString(y3),
										_1: {
											ctor: '::',
											_0: _elm_lang$core$Basics$toString(x4),
											_1: {
												ctor: '::',
												_0: _elm_lang$core$Basics$toString(y4),
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		};
		var pathAttribute = _elm_lang$svg$Svg_Attributes$d(
			A2(_elm_lang$core$String$join, ' ', pathComponents));
		return A2(
			_elm_lang$svg$Svg$path,
			{ctor: '::', _0: pathAttribute, _1: attributes},
			{ctor: '[]'});
	});
var _opensolid$svg$OpenSolid_Svg$quadraticSpline2d = F2(
	function (attributes, spline) {
		var _p10 = _opensolid$geometry$OpenSolid_QuadraticSpline2d$controlPoints(spline);
		var p1 = _p10._0;
		var p2 = _p10._1;
		var p3 = _p10._2;
		var _p11 = _opensolid$geometry$OpenSolid_Point2d$coordinates(p1);
		var x1 = _p11._0;
		var y1 = _p11._1;
		var _p12 = _opensolid$geometry$OpenSolid_Point2d$coordinates(p2);
		var x2 = _p12._0;
		var y2 = _p12._1;
		var _p13 = _opensolid$geometry$OpenSolid_Point2d$coordinates(p3);
		var x3 = _p13._0;
		var y3 = _p13._1;
		var pathComponents = {
			ctor: '::',
			_0: 'M',
			_1: {
				ctor: '::',
				_0: _elm_lang$core$Basics$toString(x1),
				_1: {
					ctor: '::',
					_0: _elm_lang$core$Basics$toString(y1),
					_1: {
						ctor: '::',
						_0: 'Q',
						_1: {
							ctor: '::',
							_0: _elm_lang$core$Basics$toString(x2),
							_1: {
								ctor: '::',
								_0: _elm_lang$core$Basics$toString(y2),
								_1: {
									ctor: '::',
									_0: _elm_lang$core$Basics$toString(x3),
									_1: {
										ctor: '::',
										_0: _elm_lang$core$Basics$toString(y3),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}
			}
		};
		var pathAttribute = _elm_lang$svg$Svg_Attributes$d(
			A2(_elm_lang$core$String$join, ' ', pathComponents));
		return A2(
			_elm_lang$svg$Svg$path,
			{ctor: '::', _0: pathAttribute, _1: attributes},
			{ctor: '[]'});
	});
var _opensolid$svg$OpenSolid_Svg$circle2d = F2(
	function (attributes, circle) {
		var r = _elm_lang$svg$Svg_Attributes$r(
			_elm_lang$core$Basics$toString(
				_opensolid$geometry$OpenSolid_Circle2d$radius(circle)));
		var _p14 = _opensolid$geometry$OpenSolid_Point2d$coordinates(
			_opensolid$geometry$OpenSolid_Circle2d$centerPoint(circle));
		var x = _p14._0;
		var y = _p14._1;
		var cx = _elm_lang$svg$Svg_Attributes$cx(
			_elm_lang$core$Basics$toString(x));
		var cy = _elm_lang$svg$Svg_Attributes$cy(
			_elm_lang$core$Basics$toString(y));
		return A2(
			_elm_lang$svg$Svg$circle,
			{
				ctor: '::',
				_0: cx,
				_1: {
					ctor: '::',
					_0: cy,
					_1: {ctor: '::', _0: r, _1: attributes}
				}
			},
			{ctor: '[]'});
	});
var _opensolid$svg$OpenSolid_Svg$arc2d = F2(
	function (attributes, arc) {
		var radius = _opensolid$geometry$OpenSolid_Arc2d$radius(arc);
		var radiusString = _elm_lang$core$Basics$toString(radius);
		var _p15 = _opensolid$geometry$OpenSolid_Point2d$coordinates(
			_opensolid$geometry$OpenSolid_Arc2d$startPoint(arc));
		var x0 = _p15._0;
		var y0 = _p15._1;
		var moveCommand = {
			ctor: '::',
			_0: 'M',
			_1: {
				ctor: '::',
				_0: _elm_lang$core$Basics$toString(x0),
				_1: {
					ctor: '::',
					_0: _elm_lang$core$Basics$toString(y0),
					_1: {ctor: '[]'}
				}
			}
		};
		var maxSegmentAngle = (2 * _elm_lang$core$Basics$pi) / 3;
		var sweptAngle = _opensolid$geometry$OpenSolid_Arc2d$sweptAngle(arc);
		var numSegments = 1 + _elm_lang$core$Basics$floor(
			_elm_lang$core$Basics$abs(sweptAngle) / maxSegmentAngle);
		var sweepFlag = (_elm_lang$core$Native_Utils.cmp(sweptAngle, 0) > -1) ? '1' : '0';
		var arcSegment = function (index) {
			var t = _elm_lang$core$Basics$toFloat(index) / _elm_lang$core$Basics$toFloat(numSegments);
			var _p16 = _opensolid$geometry$OpenSolid_Point2d$coordinates(
				A2(_opensolid$geometry$OpenSolid_Arc2d$point, arc, t));
			var x = _p16._0;
			var y = _p16._1;
			return {
				ctor: '::',
				_0: 'A',
				_1: {
					ctor: '::',
					_0: radiusString,
					_1: {
						ctor: '::',
						_0: radiusString,
						_1: {
							ctor: '::',
							_0: '0',
							_1: {
								ctor: '::',
								_0: '0',
								_1: {
									ctor: '::',
									_0: sweepFlag,
									_1: {
										ctor: '::',
										_0: _elm_lang$core$Basics$toString(x),
										_1: {
											ctor: '::',
											_0: _elm_lang$core$Basics$toString(y),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}
				}
			};
		};
		var arcSegments = A2(
			_elm_lang$core$List$map,
			arcSegment,
			A2(_elm_lang$core$List$range, 1, numSegments));
		var pathComponents = A2(
			_elm_lang$core$Basics_ops['++'],
			moveCommand,
			_elm_lang$core$List$concat(arcSegments));
		var pathAttribute = _elm_lang$svg$Svg_Attributes$d(
			A2(_elm_lang$core$String$join, ' ', pathComponents));
		return A2(
			_elm_lang$svg$Svg$path,
			{ctor: '::', _0: pathAttribute, _1: attributes},
			{ctor: '[]'});
	});
var _opensolid$svg$OpenSolid_Svg$point2d = F2(
	function (options, point) {
		return A2(
			_opensolid$svg$OpenSolid_Svg$circle2d,
			options.attributes,
			_opensolid$geometry$OpenSolid_Geometry_Types$Circle2d(
				{centerPoint: point, radius: options.radius}));
	});
var _opensolid$svg$OpenSolid_Svg$coordinatesString = function (point) {
	var _p17 = _opensolid$geometry$OpenSolid_Point2d$coordinates(point);
	var x = _p17._0;
	var y = _p17._1;
	return A2(
		_elm_lang$core$Basics_ops['++'],
		_elm_lang$core$Basics$toString(x),
		A2(
			_elm_lang$core$Basics_ops['++'],
			',',
			_elm_lang$core$Basics$toString(y)));
};
var _opensolid$svg$OpenSolid_Svg$pointsAttribute = function (points) {
	return _elm_lang$svg$Svg_Attributes$points(
		A2(
			_elm_lang$core$String$join,
			' ',
			A2(_elm_lang$core$List$map, _opensolid$svg$OpenSolid_Svg$coordinatesString, points)));
};
var _opensolid$svg$OpenSolid_Svg$lineSegment2d = F2(
	function (attributes, lineSegment) {
		var _p18 = _opensolid$geometry$OpenSolid_LineSegment2d$endpoints(lineSegment);
		var p1 = _p18._0;
		var p2 = _p18._1;
		return A2(
			_elm_lang$svg$Svg$polyline,
			{
				ctor: '::',
				_0: _opensolid$svg$OpenSolid_Svg$pointsAttribute(
					{
						ctor: '::',
						_0: p1,
						_1: {
							ctor: '::',
							_0: p2,
							_1: {ctor: '[]'}
						}
					}),
				_1: attributes
			},
			{ctor: '[]'});
	});
var _opensolid$svg$OpenSolid_Svg$triangle2d = F2(
	function (attributes, triangle) {
		var _p19 = _opensolid$geometry$OpenSolid_Triangle2d$vertices(triangle);
		var p1 = _p19._0;
		var p2 = _p19._1;
		var p3 = _p19._2;
		return A2(
			_elm_lang$svg$Svg$polygon,
			{
				ctor: '::',
				_0: _opensolid$svg$OpenSolid_Svg$pointsAttribute(
					{
						ctor: '::',
						_0: p1,
						_1: {
							ctor: '::',
							_0: p2,
							_1: {
								ctor: '::',
								_0: p3,
								_1: {ctor: '[]'}
							}
						}
					}),
				_1: attributes
			},
			{ctor: '[]'});
	});
var _opensolid$svg$OpenSolid_Svg$vector2d = F3(
	function (options, basePoint, vector) {
		var _p20 = _opensolid$geometry$OpenSolid_Vector2d$lengthAndDirection(vector);
		if (_p20.ctor === 'Just') {
			var _p22 = _p20._0._0;
			var _p21 = _p20._0._1;
			var tipWidth = options.tipWidth;
			var tipLength = options.tipLength;
			var frame = _opensolid$geometry$OpenSolid_Geometry_Types$Frame2d(
				{
					originPoint: basePoint,
					xDirection: _p21,
					yDirection: _opensolid$geometry$OpenSolid_Direction2d$perpendicularTo(_p21)
				});
			var tipPoint = A2(
				_opensolid$geometry$OpenSolid_Point2d$in_,
				frame,
				{ctor: '_Tuple2', _0: _p22, _1: 0});
			var tipBasePoint = A2(
				_opensolid$geometry$OpenSolid_Point2d$in_,
				frame,
				{ctor: '_Tuple2', _0: _p22 - tipLength, _1: 0});
			var stem = _opensolid$geometry$OpenSolid_Geometry_Types$LineSegment2d(
				{ctor: '_Tuple2', _0: basePoint, _1: tipBasePoint});
			var leftPoint = A2(
				_opensolid$geometry$OpenSolid_Point2d$in_,
				frame,
				{ctor: '_Tuple2', _0: _p22 - tipLength, _1: tipWidth / 2});
			var rightPoint = A2(
				_opensolid$geometry$OpenSolid_Point2d$in_,
				frame,
				{ctor: '_Tuple2', _0: _p22 - tipLength, _1: (0 - tipWidth) / 2});
			var tip = _opensolid$geometry$OpenSolid_Geometry_Types$Triangle2d(
				{ctor: '_Tuple3', _0: rightPoint, _1: tipPoint, _2: leftPoint});
			return A2(
				_elm_lang$svg$Svg$g,
				options.groupAttributes,
				{
					ctor: '::',
					_0: A2(_opensolid$svg$OpenSolid_Svg$lineSegment2d, options.stemAttributes, stem),
					_1: {
						ctor: '::',
						_0: A2(_opensolid$svg$OpenSolid_Svg$triangle2d, options.tipAttributes, tip),
						_1: {ctor: '[]'}
					}
				});
		} else {
			return _elm_lang$svg$Svg$text('');
		}
	});
var _opensolid$svg$OpenSolid_Svg$direction2d = F3(
	function (options, basePoint, direction) {
		return A3(
			_opensolid$svg$OpenSolid_Svg$vector2d,
			{tipLength: options.tipLength, tipWidth: options.tipWidth, stemAttributes: options.stemAttributes, tipAttributes: options.tipAttributes, groupAttributes: options.groupAttributes},
			basePoint,
			A2(_opensolid$geometry$OpenSolid_Vector2d$in_, direction, options.length));
	});
var _opensolid$svg$OpenSolid_Svg$polyline2d = F2(
	function (attributes, polyline) {
		var vertices = _opensolid$geometry$OpenSolid_Polyline2d$vertices(polyline);
		return A2(
			_elm_lang$svg$Svg$polyline,
			{
				ctor: '::',
				_0: _opensolid$svg$OpenSolid_Svg$pointsAttribute(vertices),
				_1: attributes
			},
			{ctor: '[]'});
	});
var _opensolid$svg$OpenSolid_Svg$polygon2d = F2(
	function (attributes, polygon) {
		var vertices = _opensolid$geometry$OpenSolid_Polygon2d$vertices(polygon);
		return A2(
			_elm_lang$svg$Svg$polygon,
			{
				ctor: '::',
				_0: _opensolid$svg$OpenSolid_Svg$pointsAttribute(vertices),
				_1: attributes
			},
			{ctor: '[]'});
	});
var _opensolid$svg$OpenSolid_Svg$render2d = F2(
	function (boundingBox, svg) {
		var _p23 = _opensolid$geometry$OpenSolid_BoundingBox2d$dimensions(boundingBox);
		var width = _p23._0;
		var height = _p23._1;
		var _p24 = _opensolid$geometry$OpenSolid_BoundingBox2d$extrema(boundingBox);
		var minX = _p24.minX;
		var maxY = _p24.maxY;
		var topLeftFrame = _opensolid$geometry$OpenSolid_Geometry_Types$Frame2d(
			{
				originPoint: _opensolid$geometry$OpenSolid_Geometry_Types$Point2d(
					{ctor: '_Tuple2', _0: minX, _1: maxY}),
				xDirection: _opensolid$geometry$OpenSolid_Direction2d$positiveX,
				yDirection: _opensolid$geometry$OpenSolid_Direction2d$negativeY
			});
		return A2(
			_elm_lang$svg$Svg$svg,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$width(
					_elm_lang$core$Basics$toString(width)),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$height(
						_elm_lang$core$Basics$toString(height)),
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: A2(_opensolid$svg$OpenSolid_Svg$relativeTo, topLeftFrame, svg),
				_1: {ctor: '[]'}
			});
	});
var _opensolid$svg$OpenSolid_Svg$VectorOptions = F5(
	function (a, b, c, d, e) {
		return {tipWidth: a, tipLength: b, stemAttributes: c, tipAttributes: d, groupAttributes: e};
	});
var _opensolid$svg$OpenSolid_Svg$DirectionOptions = F6(
	function (a, b, c, d, e, f) {
		return {length: a, tipWidth: b, tipLength: c, stemAttributes: d, tipAttributes: e, groupAttributes: f};
	});
var _opensolid$svg$OpenSolid_Svg$PointOptions = F2(
	function (a, b) {
		return {radius: a, attributes: b};
	});
